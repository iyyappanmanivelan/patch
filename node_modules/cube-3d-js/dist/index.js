const m = "cube-3d", T = "cube-3d-base";
class g extends Error {
  constructor(t) {
    super(t), this.name = "Cube3DError";
  }
}
const D = (e) => {
  const t = document.getElementById(e);
  if (!t)
    throw new Error(`Element with ID ${e} not found.`);
  return t.style.overflow = "hidden", t.style.userSelect = "none", t;
}, v = (e, t, r) => {
  const n = document.createElement("div");
  return n.setAttribute("id", r), n.style.transformStyle = "preserve-3d", n.style.width = `${e}px`, n.style.height = `${t}px`, n;
}, I = (e, t) => {
  const r = e.querySelectorAll(
    "[data-cube-face]"
  );
  if (r.forEach((n) => {
    n.style.position = "absolute", n.style.width = "100%", n.style.height = "100%";
  }), r.length === 0)
    throw new g(
      "At least one face element is required for transformations."
    );
  {
    const n = [
      `translateZ(${t / 2}px)`,
      `translateX(${t / 2}px) rotateY(90deg)`,
      `translateZ(-${t / 2}px) rotateY(180deg)`,
      `translateX(-${t / 2}px) rotateY(-90deg)`
    ];
    r.forEach((o, s) => {
      o && (o.style.transform = n[s]);
    });
  }
  return r;
}, L = (e, t) => {
  let r;
  new MutationObserver((o) => {
    o.forEach((s) => {
      if (s.attributeName === "style") {
        const i = window.getComputedStyle(e).getPropertyValue("transform"), c = p(i), a = b(c);
        if (a !== r) {
          const u = r;
          r = a, t(a, u);
        }
      }
    });
  }).observe(e, { attributes: !0 });
};
function p(e) {
  const t = e.match(/\((.*?)\)/);
  if (!t) return 0;
  const r = t[1].split(", ").map(Number), n = r[8], o = r[0];
  return Math.atan2(n, o) * 180 / Math.PI;
}
function b(e) {
  switch (!0) {
    case (e >= -45 && e < 45):
      return 1;
    case (e >= 45 && e < 135):
      return 4;
    case (e >= -135 && e < -45):
      return 2;
    default:
      return 3;
  }
}
const w = (e, t, r) => {
  let n = !1, o, s, i, c = t;
  f(e, c), e.addEventListener("mousedown", (l) => {
    n = !0, o = l.clientX, i = window.innerWidth, document.addEventListener("mousemove", a), document.addEventListener("mouseup", u);
  });
  function a(l) {
    if (n) {
      s = l.clientX;
      const h = Math.abs(s - o) / i * 100 * r;
      let E;
      s < o ? E = (c - h % 360) % 360 : E = (c + h % 360) % 360, c = E, f(e, E);
    }
  }
  function u() {
    n = !1, document.removeEventListener("mousemove", a), document.removeEventListener("mouseup", u);
  }
}, S = (e, t, r) => {
  let n = t;
  e.addEventListener("wheel", (o) => {
    let s;
    o.deltaX > 0 ? s = (n - r) % 360 : s = (n + r) % 360, n = s, f(e, s);
  });
}, _ = (e, t, r) => {
  let n = !1, o, s, i = t;
  e.addEventListener("touchstart", (c) => {
    n = !0, o = c.touches[0].clientX;
  }), e.addEventListener("touchmove", (c) => {
    let a;
    if (n) {
      s = c.touches[0].clientX;
      const u = Math.abs(s - o);
      if (u < 10) return;
      o < s ? a = (i + u / r) % 360 : a = (i - u / r) % 360, i = a, f(e, a);
    }
  }), e.addEventListener("touchend", () => {
    n = !1;
  });
};
function A(e, t, r, n, o) {
  w(e, t, r), S(e, t, n), _(e, t, o);
}
const f = (e, t) => {
  e.style.transform = `rotateY(${t}deg)`;
};
let d;
const x = (e = m, {
  width: t = 500,
  height: r = 500,
  baseId: n = T,
  initialRotation: o = 0,
  intensity: s = 0.2,
  scrollIntensity: i = 1.5,
  swipeIntensity: c = 75
} = {}) => {
  const a = D(e);
  if (!a) {
    console.error("Element not found.");
    return;
  }
  d = v(t, r, n), I(a, t).forEach((l) => {
    d.appendChild(l);
  }), a.appendChild(d), A(
    d,
    o,
    s,
    i,
    c
  );
}, y = (e) => {
  L(d, (t, r) => {
    e(t, r);
  });
}, N = (e) => d.children[e - 1];
export {
  N as getFaceByIndex,
  x as init,
  y as onRotate
};
